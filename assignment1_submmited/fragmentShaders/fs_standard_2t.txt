#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;

out vec4 fragColor;

uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float ambient_strength;
    float specular_strength;
    float diffuse_strength;
};

struct SpotLight {
    vec3 position;
    vec3 direction;
    float cutOff;
    float outerCutOff;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float ambient_strength;
    float specular_strength;
    float diffuse_strength;
};


struct Material {
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
    float shininess;
};

uniform Light light1;
uniform Light light2;
uniform SpotLight sl;

uniform Material material;

void main() {
    // ambient
    vec3 ambient1 = light1.ambient_strength * light1.ambient * vec3(texture(first_texture, aTexCoord));
    vec3 ambient2 = light2.ambient_strength * light2.ambient * vec3(texture(first_texture, aTexCoord));
    vec3 ambient3 = sl.ambient_strength * sl.ambient * vec3(texture(first_texture, aTexCoord));
    vec3 totalAmbient = ambient1 + ambient2 + ambient3;


    // diffuse
    vec3 norm = normalize(aNormal);

    vec3 lightDir1 = normalize(light1.position - aPos);
    float diff1 = max(dot(norm, lightDir1), 0.0);
    vec3 diffuse1 = light1.diffuse_strength * light1.diffuse * diff1 * vec3(texture(first_texture, aTexCoord));

    vec3 lightDir2 = normalize(light2.position - aPos);
    float diff2 = max(dot(norm, lightDir2), 0.0);
    vec3 diffuse2 = light2.diffuse_strength * light2.diffuse * diff2 * vec3(texture(first_texture, aTexCoord));


    vec3 lightDir3 = normalize(sl.position - aPos);
    float diff3 = max(dot(norm, lightDir3), 0.0);
    vec3 diffuse3= vec3(0.0);


    // specular
    vec3 viewDir = normalize(viewPos - aPos);

    vec3 reflectDir1 = reflect(-lightDir1, norm);
    float spec1 = pow(max(dot(viewDir, reflectDir1), 0.0), material.shininess);
    vec3 specular1 = light1.specular_strength * light1.specular * spec1 * vec3(texture(second_texture, aTexCoord));

    vec3 reflectDir2 = reflect(-lightDir2, norm);
    float spec2 = pow(max(dot(viewDir, reflectDir2), 0.0), material.shininess);
    vec3 specular2 = light2.specular_strength * light2.specular * spec2 * vec3(texture(second_texture, aTexCoord));

    vec3 reflectDir3 = reflect(-lightDir3, norm);
    float spec3 = pow(max(dot(viewDir, reflectDir3), 0.0), material.shininess);
    vec3 specular3 = vec3(0.0);

    // SpotLight Config
    float theta = dot(lightDir3, normalize(-sl.direction));
    float epsilon   = sl.cutOff - sl.outerCutOff;
    float intensity = clamp((theta - sl.outerCutOff) / epsilon, 0.0, 1.0);

    if(theta > sl.outerCutOff)
    {
        diffuse3 = intensity * sl.diffuse_strength * sl.diffuse * diff3 * vec3(texture(first_texture, aTexCoord));
        specular3 = intensity * sl.specular_strength * sl.specular * spec3 * vec3(texture(second_texture, aTexCoord));
    }

    // result
    vec3 result1 = diffuse1 + specular1;
    vec3 result2 = diffuse2 + specular2;
    vec3 result3 = diffuse3 + specular3;
    fragColor = vec4(totalAmbient + result1 + result2 + result3 , 1.0);
}