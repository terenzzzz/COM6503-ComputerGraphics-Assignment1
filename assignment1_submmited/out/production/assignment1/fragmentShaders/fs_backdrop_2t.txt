#version 330 core

in vec3 aPos;
in vec3 aNormal;
in vec2 aTexCoord;
in vec2 movingTexCoord1, movingTexCoord2;

struct Light {
  vec3 position;
  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float ambient_strength;
  float specular_strength;
  float diffuse_strength;
};

struct SpotLight {
  vec3 position;
  vec3 direction;
  float cutOff;
  float outerCutOff;

  vec3 ambient;
  vec3 diffuse;
  vec3 specular;
  float ambient_strength;
  float specular_strength;
  float diffuse_strength;
};


out vec4 fragColor;

uniform vec3 viewPos;
uniform sampler2D first_texture;
uniform sampler2D second_texture;

uniform Light light1;
uniform Light light2;
uniform SpotLight sl;


void main() {

    vec4 color1 = texture(first_texture, aTexCoord);
    vec4 color2 = texture(second_texture, movingTexCoord1) * 2.0;
    vec4 color3 = texture(second_texture, movingTexCoord2) * 2.0;
    vec4 blendedColor = mix(color1, mix(color2, color3, 0.5f), 0.1f);


    // ambient
    vec3 ambient1 = light1.ambient_strength * light1.ambient * vec3(blendedColor.rgb);
    vec3 ambient2 = light2.ambient_strength * light2.ambient * vec3(blendedColor.rgb);
    vec3 ambient3 = sl.ambient_strength * sl.ambient * vec3(blendedColor.rgb);

    vec3 totalAmbient = ambient1 + ambient2 + ambient3;

    // diffuse
    vec3 norm = normalize(aNormal);

    vec3 lightDir1 = normalize(light1.position - aPos);
    float diff1 = max(dot(norm, lightDir1), 0.0);
    vec3 diffuse1 = light1.diffuse * diff1 * vec3(blendedColor.rgb);

    vec3 lightDir2 = normalize(light2.position - aPos);
    float diff2 = max(dot(norm, lightDir2), 0.0);
    vec3 diffuse2 = light2.diffuse * diff2 * vec3(blendedColor.rgb);

    vec3 lightDir3 = normalize(sl.position - aPos);
    float diff3 = max(dot(norm, lightDir3), 0.0);
    vec3 diffuse3= vec3(0.0);

    // SpotLight Config
    float theta = dot(lightDir3, normalize(-sl.direction));
    float epsilon  = sl.cutOff - sl.outerCutOff;
    float intensity = clamp((theta - sl.outerCutOff) / epsilon, 0.0, 1.0);
    if(theta > sl.outerCutOff)
    {
    diffuse3 = intensity * sl.diffuse_strength * sl.diffuse * diff3 * vec3(texture(first_texture, aTexCoord));
    }

    vec3 result = vec3(totalAmbient + diffuse1 + diffuse2 + diffuse3);
    fragColor = vec4(result, 1.0f);

}